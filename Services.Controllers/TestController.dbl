import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Net.Mime
import System.Text
import System.Threading.Tasks

import Services.Controllers

namespace Services.Controllers

    {Produces("application/json")}
    {Route("[controller]")}
    public partial class TestController extends ControllerBase

        ;;Services provided via dependency injection
        private _AppSettings, @IOptions<Services.Models.AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aMyApiService">MyApiService instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        ;;; <summary>
        ;;;   The method catalog does not provide a description for this operation.
        ;;; </summary>
        ;;; <remarks>
        ;;;   The functinality of this endpoint is based on custom code in the underlying application. 
        ;;; </remarks>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="400"><HTTP_400_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        ;;; <returns></returns>
        public method TestController
            aAppSettings, @IOptions<Services.Models.AppSettings>
        proc
            _AppSettings = aAppSettings
        endmethod

        {HttpGet}
        {Route("GetEnvironmentVariable")}
        {Produces("application/json")}
        public method GetEnvironmentVariable, @ActionResult<string>
            {FromQuery}
            required in Name, string
        proc
            data result = Environment.GetEnvironmentVariable(Name)
            mreturn ok(result == ^null ? "Not set!" : result)
        endmethod

    endclass

endnamespace
