;;*****************************************************************************
;;
;; File:        ItemMethods.dbl
;;
;; Description: xfServerPlus methods for structure ITEM
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef strItem
.include "ITEMS" repository, structure="strItem", end
.endc

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function AddItem ,boolean

    {xfParameter(name="Item")}
    required in aItem    ,strItem

    endparams

    stack record
        retVal  ,boolean
        chItem   ,int
        tmpItem  ,strItem
    endrecord

    external function
        ValidateItem ,boolean
    endexternal

proc

    if (retVal=ValidateItem(tmpItem=aItem))
    begin
        try
        begin
            open(chItem=0,u:i,"DAT:items.ism")
            store(chItem,tmpItem)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (chItem&&%chopen(chItem))
                close chItem
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function DeleteItem  ,boolean

    {xfParameter(name="ItemNumber")}
    required in aItemNumber  ,d6

    endparams

    stack record local_data
        retVal  ,boolean
        chItem   ,int
        item    ,strItem
    endrecord
proc

    init local_data

    item.item_number = aItemNumber

    try
    begin
        open(chItem=0,u:i,"DAT:items.ism")
        read(chItem,item,keyval(chItem,item,0))
        delete(chItem)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (chItem&&%chopen(chItem))
            close chItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetItem, boolean

    {xfParameter(name="ItemNumber")}
    required in  aItemNumber, d6

    {xfParameter(name="Item")}
    required out aItem, strItem

    endparams

    stack record local_data
        retVal  ,boolean
        chItem   ,int
    endrecord

proc

    init local_data, aItem
    retVal = true

    aItem.item_number = aItemNumber

    try
    begin
        open(chItem=0,i:i,"DAT:items.ism")
        read(chItem,aItem,keyval(chItem,aItem,0))
    end
    catch (ex)
    begin
        init aItem
        retVal = false
    end
    finally
    begin
        if (chItem&&%chopen(chItem))
            close chItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetAllItems, boolean

    {xfParameter(name="Items",collectionType=xfCollectType.structure,structure="strItem",dataTable=true)}
    required out aItems, @ArrayList

    endparams

    stack record local_data
        retVal  ,boolean
        chItem, int
        item, strItem
    endrecord

proc

    init local_data
    retVal=true

    aItems = new ArrayList()


    try
    begin
        ;;Open the data file
        open(chItem=0,i:i,"DAT:items.ism")

        ;;Position to the first record to be returned
        find(chItem,,^FIRST)

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(chItem,item)

            ;;Add the record to the return collection
            aItems.Add((@strItem)item)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (chItem&&%chopen(chItem))
            close chItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function UpdateItem, boolean

    {xfParameter(name="Item")}
    required in aItem, strItem

    endparams

    stack record local_data
        retVal  ,boolean
        chItem   ,int
        newItem  ,strItem
        oldItem  ,strItem
    endrecord

    external function
        ValidateItem ,boolean
    endexternal

proc

    init local_data

    if (retVal=ValidateItem(newItem=aItem))
    begin
        try
        begin
            open(chItem=0,u:i,"DAT:items.ism")
            read(chItem,oldItem,newItem.item_number)
            write(chItem,newItem)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (chItem&&%chopen(chItem))
                close chItem
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function ValidateItem, boolean

    {xfParameter(name="Item")}
    required inout aItem, strItem

    endparams

    stack record
        dataIsValid ,boolean
    endrecord

proc

    dataIsValid = true

    ;;Validate required fields
    if ((dataIsValid)&&(!aItem.item_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aItem.size))
        dataIsValid = false

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
