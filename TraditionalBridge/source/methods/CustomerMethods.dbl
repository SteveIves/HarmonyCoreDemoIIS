;;*****************************************************************************
;;
;; File:        CustomerMethods.dbl
;;
;; Description: xfServerPlus methods for structure CUSTOMER
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef strCustomer
.include "CUSTOMERS" repository, structure="strCustomer", end
.endc

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function AddCustomer ,boolean

    {xfParameter(name="Customer")}
    required in aCustomer    ,strCustomer

    endparams

    stack record
        retVal  ,boolean
        chCustomer   ,int
        tmpCustomer  ,strCustomer
    endrecord

    external function
        ValidateCustomer ,boolean
    endexternal

proc

    if (retVal=ValidateCustomer(tmpCustomer=aCustomer))
    begin
        try
        begin
            open(chCustomer=0,u:i,"DAT:customers.ism")
            store(chCustomer,tmpCustomer)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (chCustomer&&%chopen(chCustomer))
                close chCustomer
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function DeleteCustomer  ,boolean

    {xfParameter(name="CustomerNumber")}
    required in aCustomerNumber  ,d6

    endparams

    stack record local_data
        retVal  ,boolean
        chCustomer   ,int
        customer    ,strCustomer
    endrecord
proc

    init local_data

    customer.customer_number = aCustomerNumber

    try
    begin
        open(chCustomer=0,u:i,"DAT:customers.ism")
        read(chCustomer,customer,keyval(chCustomer,customer,0))
        delete(chCustomer)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (chCustomer&&%chopen(chCustomer))
            close chCustomer
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetCustomer, boolean

    {xfParameter(name="CustomerNumber")}
    required in  aCustomerNumber, d6

    {xfParameter(name="Customer")}
    required out aCustomer, strCustomer

    endparams

    stack record local_data
        retVal  ,boolean
        chCustomer   ,int
    endrecord

proc

    init local_data, aCustomer
    retVal = true

    aCustomer.customer_number = aCustomerNumber

    try
    begin
        open(chCustomer=0,i:i,"DAT:customers.ism")
        read(chCustomer,aCustomer,keyval(chCustomer,aCustomer,0))
    end
    catch (ex)
    begin
        init aCustomer
        retVal = false
    end
    finally
    begin
        if (chCustomer&&%chopen(chCustomer))
            close chCustomer
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetAllCustomers, boolean

    {xfParameter(name="Customers",collectionType=xfCollectType.structure,structure="strCustomer",dataTable=true)}
    required out aCustomers, @ArrayList

    endparams

    stack record local_data
        retVal  ,boolean
        chCustomer, int
        customer, strCustomer
    endrecord

proc

    init local_data
    retVal=true

    aCustomers = new ArrayList()


    try
    begin
        ;;Open the data file
        open(chCustomer=0,i:i,"DAT:customers.ism")

        ;;Position to the first record to be returned
        find(chCustomer,,^FIRST)

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(chCustomer,customer)

            ;;Add the record to the return collection
            aCustomers.Add((@strCustomer)customer)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (chCustomer&&%chopen(chCustomer))
            close chCustomer
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function UpdateCustomer, boolean

    {xfParameter(name="Customer")}
    required in aCustomer, strCustomer

    endparams

    stack record local_data
        retVal  ,boolean
        chCustomer   ,int
        newCustomer  ,strCustomer
        oldCustomer  ,strCustomer
    endrecord

    external function
        ValidateCustomer ,boolean
    endexternal

proc

    init local_data

    if (retVal=ValidateCustomer(newCustomer=aCustomer))
    begin
        try
        begin
            open(chCustomer=0,u:i,"DAT:customers.ism")
            read(chCustomer,oldCustomer,newCustomer.customer_number)
            write(chCustomer,newCustomer)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (chCustomer&&%chopen(chCustomer))
                close chCustomer
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function ValidateCustomer, boolean

    {xfParameter(name="Customer")}
    required inout aCustomer, strCustomer

    endparams

    stack record
        dataIsValid ,boolean
    endrecord

proc

    dataIsValid = true

    ;;Validate required fields
    if ((dataIsValid)&&(!aCustomer.customer_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.name))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.street))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.city))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.state))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.zip_code))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.phone))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.favorite_item))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.payment_terms_code))
        dataIsValid = false
    if ((dataIsValid)&&(!aCustomer.credit_limit))
        dataIsValid = false

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
