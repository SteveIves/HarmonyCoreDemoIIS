;;*****************************************************************************
;;
;; File:        OrderItemMethods.dbl
;;
;; Description: xfServerPlus methods for structure ORDER_ITEM
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef strOrderItem
.include "ORDER_ITEMS" repository, structure="strOrderItem", end
.endc

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function AddOrderItem ,boolean

    {xfParameter(name="OrderItem")}
    required in aOrderItem    ,strOrderItem

    endparams

    stack record
        retVal  ,boolean
        chOrderItem   ,int
        tmpOrderItem  ,strOrderItem
    endrecord

    external function
        ValidateOrderItem ,boolean
    endexternal

proc

    if (retVal=ValidateOrderItem(tmpOrderItem=aOrderItem))
    begin
        try
        begin
            open(chOrderItem=0,u:i,"DAT:order_items.ism")
            store(chOrderItem,tmpOrderItem)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (chOrderItem&&%chopen(chOrderItem))
                close chOrderItem
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function DeleteOrderItem  ,boolean

    {xfParameter(name="OrderNumber")}
    required in aOrderNumber  ,d6

    {xfParameter(name="ItemNumber")}
    required in aItemNumber  ,d2

    endparams

    stack record local_data
        retVal  ,boolean
        chOrderItem   ,int
        order_item    ,strOrderItem
    endrecord
proc

    init local_data

    order_item.order_number = aOrderNumber
    order_item.item_number = aItemNumber

    try
    begin
        open(chOrderItem=0,u:i,"DAT:order_items.ism")
        read(chOrderItem,order_item,keyval(chOrderItem,order_item,0))
        delete(chOrderItem)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (chOrderItem&&%chopen(chOrderItem))
            close chOrderItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetOrderItem, boolean

    {xfParameter(name="OrderNumber")}
    required in  aOrderNumber, d6

    {xfParameter(name="ItemNumber")}
    required in  aItemNumber, d2

    {xfParameter(name="OrderItem")}
    required out aOrderItem, strOrderItem

    endparams

    stack record local_data
        retVal  ,boolean
        chOrderItem   ,int
    endrecord

proc

    init local_data, aOrderItem
    retVal = true

    aOrderItem.order_number = aOrderNumber
    aOrderItem.item_number = aItemNumber

    try
    begin
        open(chOrderItem=0,i:i,"DAT:order_items.ism")
        read(chOrderItem,aOrderItem,keyval(chOrderItem,aOrderItem,0))
    end
    catch (ex)
    begin
        init aOrderItem
        retVal = false
    end
    finally
    begin
        if (chOrderItem&&%chopen(chOrderItem))
            close chOrderItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetAllOrderItems, boolean

    {xfParameter(name="OrderNumber")}
    required in  aOrderNumber, d6

    {xfParameter(name="OrderItems",collectionType=xfCollectType.structure,structure="strOrderItem",dataTable=true)}
    required out aOrderItems, @ArrayList

    endparams

    stack record local_data
        retVal  ,boolean
        chOrderItem, int
        order_item, strOrderItem
        filterData, a8
        filterLen, int
    endrecord

proc

    init local_data
    retVal=true

    aOrderItems = new ArrayList()

    order_item.order_number = aOrderNumber
    filterLen += ^size(order_item.order_number)
    filterData=keyval(chOrderItem,order_item,0)

    try
    begin
        ;;Open the data file
        open(chOrderItem=0,i:i,"DAT:order_items.ism")

        ;;Position to the first record to be returned
        find(chOrderItem,,filterData(1:filterLen))

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(chOrderItem,order_item)

            ;;Make sure we're still in range with the filter
            if (keyval(chOrderItem,order_item,0)!=filterData(1:filterLen))
                exitloop

            ;;Add the record to the return collection
            aOrderItems.Add((@strOrderItem)order_item)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (chOrderItem&&%chopen(chOrderItem))
            close chOrderItem
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function UpdateOrderItem, boolean

    {xfParameter(name="OrderItem")}
    required in aOrderItem, strOrderItem

    endparams

    stack record local_data
        retVal  ,boolean
        chOrderItem   ,int
        newOrderItem  ,strOrderItem
        oldOrderItem  ,strOrderItem
    endrecord

    external function
        ValidateOrderItem ,boolean
    endexternal

proc

    init local_data

    if (retVal=ValidateOrderItem(newOrderItem=aOrderItem))
    begin
        try
        begin
            open(chOrderItem=0,u:i,"DAT:order_items.ism")
            read(chOrderItem,oldOrderItem,newOrderItem.order_number)
            write(chOrderItem,newOrderItem)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (chOrderItem&&%chopen(chOrderItem))
                close chOrderItem
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function ValidateOrderItem, boolean

    {xfParameter(name="OrderItem")}
    required inout aOrderItem, strOrderItem

    endparams

    stack record
        dataIsValid ,boolean
    endrecord

proc

    dataIsValid = true

    ;;Validate required fields
    if ((dataIsValid)&&(!aOrderItem.order_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrderItem.item_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrderItem.item_ordered))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrderItem.quantity_ordered))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrderItem.unit_price))
        dataIsValid = false

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
