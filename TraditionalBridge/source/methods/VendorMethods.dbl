;;*****************************************************************************
;;
;; File:        VendorMethods.dbl
;;
;; Description: xfServerPlus methods for structure VENDOR
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef strVendor
.include "VENDORS" repository, structure="strVendor", end
.endc

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function AddVendor, boolean

    {xfParameter(name="Vendor")}
    required in aVendor, strVendor

    stack record
        retVal, boolean
        chVendor, int
        tmpVendor, strVendor
    endrecord

    external function
        ValidateVendor, boolean
    endexternal

proc
    if (retVal=%ValidateVendor(tmpVendor=aVendor))
    begin
        try
        begin
            open(chVendor=0,u:i,"DAT:vendors.ism")
            store(chVendor,tmpVendor)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (chVendor)
                close chVendor
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function DeleteVendor, boolean

    {xfParameter(name="VendorNumber")}
    required in aVendorNumber, d6

    stack record local_data
        retVal  ,boolean
        chVendor, int
        vendor, strVendor
    endrecord
proc

    init local_data

    vendor.vendor_number = aVendorNumber

    try
    begin
        open(chVendor=0,u:i,"DAT:vendors.ism")
        read(chVendor,vendor,keyval(chVendor,vendor,0))
        delete(chVendor)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (chVendor)
            close chVendor
     end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetVendor, boolean

    {xfParameter(name="VendorNumber")}
    required in  aVendorNumber, d6

    {xfParameter(name="Vendor")}
    required out aVendor, strVendor

    stack record local_data
        retVal, boolean
        chVendor, int
    endrecord

proc
    init local_data, aVendor
    retVal = true

    aVendor.vendor_number = aVendorNumber

    try
    begin
        open(chVendor=0,i:i,"DAT:vendors.ism")
        read(chVendor,aVendor,keyval(chVendor,aVendor,0))
    end
    catch (ex)
    begin
        init aVendor
        retVal = false
    end
    finally
    begin
        if (chVendor)
            close chVendor
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function GetAllVendors, boolean

    {xfParameter(name="Vendors",collectionType=xfCollectType.structure,structure="strVendor",dataTable=true)}
    required out aVendors, @ArrayList

    stack record local_data
        retVal, boolean
        chVendor, int
        vendor, strVendor
    endrecord

proc
    init local_data
    retVal=true

    aVendors = new ArrayList()


    try
    begin
        ;;Open the data file
        open(chVendor=0,i:i,"DAT:vendors.ism")

        ;;Position to the first record to be returned
        find(chVendor,,^FIRST)

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(chVendor,vendor)

            ;;Add the record to the return collection
            aVendors.Add((@strVendor)vendor)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (chVendor)
            close chVendor
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function UpdateVendor, boolean

    {xfParameter(name="Vendor")}
    required in aVendor, strVendor

    stack record local_data
        retVal, boolean
        chVendor,  int
        newVendor, strVendor
        oldVendor, strVendor
    endrecord

    external function
        ValidateVendor ,boolean
    endexternal

proc
    init local_data

    if (retVal=%ValidateVendor(newVendor=aVendor))
    begin
        try
        begin
            open(chVendor=0,u:i,"DAT:vendors.ism")
            read(chVendor,oldVendor,newVendor.vendor_number)
            write(chVendor,newVendor)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (chVendor)
                close chVendor
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function ValidateVendor, boolean

    {xfParameter(name="Vendor")}
    required inout aVendor, strVendor

    stack record
        dataIsValid ,boolean
    endrecord

proc
    dataIsValid = true

    ;;Validate required fields

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
