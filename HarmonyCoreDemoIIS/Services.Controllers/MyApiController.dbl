;;*****************************************************************************
;;
;; Title:       MyApiController.dbl
;;
;; Description: This class defines a WebAPI controller that exposes
;;              various endpoints used to execute routines via the
;;              Harmony Core Traditional Bridge mechanism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

import Services.Controllers
import Services.Models

namespace Services.Controllers

    {Route("MyApi")}
    public partial class MyApiController extends ControllerBase

        ;;Services provided via dependency injection
        private _MyApiService, @MyApiService
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aMyApiService">MyApiService instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method MyApiController
            aMyApiService, @MyApiService
			aAppSettings, @IOptions<AppSettings>
        proc
            _MyApiService = aMyApiService
            _AppSettings = aAppSettings
        endmethod

        {Route("AddCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddCustomer, @Task<ActionResult<AddCustomer_Response>>
            {FromBody}
            required in aRequest, @AddCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddCustomer(aRequest))
        endmethod

        {Route("AddItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddItem, @Task<ActionResult<AddItem_Response>>
            {FromBody}
            required in aRequest, @AddItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddItem(aRequest))
        endmethod

        {Route("AddOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddOrder, @Task<ActionResult<AddOrder_Response>>
            {FromBody}
            required in aRequest, @AddOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddOrder(aRequest))
        endmethod

        {Route("AddOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddOrderItem, @Task<ActionResult<AddOrderItem_Response>>
            {FromBody}
            required in aRequest, @AddOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddOrderItem(aRequest))
        endmethod

        {Route("AddVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddVendor, @Task<ActionResult<AddVendor_Response>>
            {FromBody}
            required in aRequest, @AddVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddVendor(aRequest))
        endmethod

        {Route("CanDeleteCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteCustomer, @Task<ActionResult<CanDeleteCustomer_Response>>
            {FromBody}
            required in aRequest, @CanDeleteCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteCustomer(aRequest))
        endmethod

        {Route("CanDeleteItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteItem, @Task<ActionResult<CanDeleteItem_Response>>
            {FromBody}
            required in aRequest, @CanDeleteItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteItem(aRequest))
        endmethod

        {Route("CanDeleteOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteOrder, @Task<ActionResult<CanDeleteOrder_Response>>
            {FromBody}
            required in aRequest, @CanDeleteOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteOrder(aRequest))
        endmethod

        {Route("CanDeleteOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteOrderItem, @Task<ActionResult<CanDeleteOrderItem_Response>>
            {FromBody}
            required in aRequest, @CanDeleteOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteOrderItem(aRequest))
        endmethod

        {Route("CanDeleteVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteVendor, @Task<ActionResult<CanDeleteVendor_Response>>
            {FromBody}
            required in aRequest, @CanDeleteVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteVendor(aRequest))
        endmethod

        {Route("DeleteCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteCustomer, @Task<ActionResult<DeleteCustomer_Response>>
            {FromBody}
            required in aRequest, @DeleteCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteCustomer(aRequest))
        endmethod

        {Route("DeleteItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteItem, @Task<ActionResult<DeleteItem_Response>>
            {FromBody}
            required in aRequest, @DeleteItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteItem(aRequest))
        endmethod

        {Route("DeleteOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteOrder, @Task<ActionResult<DeleteOrder_Response>>
            {FromBody}
            required in aRequest, @DeleteOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteOrder(aRequest))
        endmethod

        {Route("DeleteOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteOrderItem, @Task<ActionResult<DeleteOrderItem_Response>>
            {FromBody}
            required in aRequest, @DeleteOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteOrderItem(aRequest))
        endmethod

        {Route("DeleteVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteVendor, @Task<ActionResult<DeleteVendor_Response>>
            {FromBody}
            required in aRequest, @DeleteVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteVendor(aRequest))
        endmethod

        {Route("GetAllCustomers")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllCustomers, @Task<ActionResult<GetAllCustomers_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllCustomers())
        endmethod

        {Route("GetAllItems")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllItems, @Task<ActionResult<GetAllItems_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllItems())
        endmethod

        {Route("GetAllOrderItems")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetAllOrderItems, @Task<ActionResult<GetAllOrderItems_Response>>
            {FromBody}
            required in aRequest, @GetAllOrderItems_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetAllOrderItems(aRequest))
        endmethod

        {Route("GetAllOrders")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllOrders, @Task<ActionResult<GetAllOrders_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllOrders())
        endmethod

        {Route("GetAllVendors")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllVendors, @Task<ActionResult<GetAllVendors_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllVendors())
        endmethod

        {Route("GetCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetCustomer, @Task<ActionResult<GetCustomer_Response>>
            {FromBody}
            required in aRequest, @GetCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetCustomer(aRequest))
        endmethod

        {Route("GetItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetItem, @Task<ActionResult<GetItem_Response>>
            {FromBody}
            required in aRequest, @GetItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetItem(aRequest))
        endmethod

        {Route("GetOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetOrder, @Task<ActionResult<GetOrder_Response>>
            {FromBody}
            required in aRequest, @GetOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetOrder(aRequest))
        endmethod

        {Route("GetOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetOrderItem, @Task<ActionResult<GetOrderItem_Response>>
            {FromBody}
            required in aRequest, @GetOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetOrderItem(aRequest))
        endmethod

        {Route("GetVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetVendor, @Task<ActionResult<GetVendor_Response>>
            {FromBody}
            required in aRequest, @GetVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetVendor(aRequest))
        endmethod

        {Route("UpdateCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateCustomer, @Task<ActionResult<UpdateCustomer_Response>>
            {FromBody}
            required in aRequest, @UpdateCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateCustomer(aRequest))
        endmethod

        {Route("UpdateItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateItem, @Task<ActionResult<UpdateItem_Response>>
            {FromBody}
            required in aRequest, @UpdateItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateItem(aRequest))
        endmethod

        {Route("UpdateOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateOrder, @Task<ActionResult<UpdateOrder_Response>>
            {FromBody}
            required in aRequest, @UpdateOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateOrder(aRequest))
        endmethod

        {Route("UpdateOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateOrderItem, @Task<ActionResult<UpdateOrderItem_Response>>
            {FromBody}
            required in aRequest, @UpdateOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateOrderItem(aRequest))
        endmethod

        {Route("UpdateVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateVendor, @Task<ActionResult<UpdateVendor_Response>>
            {FromBody}
            required in aRequest, @UpdateVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateVendor(aRequest))
        endmethod

        {Route("ValidateCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateCustomer, @Task<ActionResult<ValidateCustomer_Response>>
            {FromBody}
            required in aRequest, @ValidateCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateCustomer(aRequest))
        endmethod

        {Route("ValidateItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateItem, @Task<ActionResult<ValidateItem_Response>>
            {FromBody}
            required in aRequest, @ValidateItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateItem(aRequest))
        endmethod

        {Route("ValidateOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateOrder, @Task<ActionResult<ValidateOrder_Response>>
            {FromBody}
            required in aRequest, @ValidateOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateOrder(aRequest))
        endmethod

        {Route("ValidateOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateOrderItem, @Task<ActionResult<ValidateOrderItem_Response>>
            {FromBody}
            required in aRequest, @ValidateOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateOrderItem(aRequest))
        endmethod

        {Route("ValidateVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateVendor, @Task<ActionResult<ValidateVendor_Response>>
            {FromBody}
            required in aRequest, @ValidateVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateVendor(aRequest))
        endmethod

    endclass

endnamespace
